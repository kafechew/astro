<div id="chat-container">
  <div id="message-display-area"></div>
  <div id="input-area" style="display: flex;">
    <input type="text" id="chat-input" style="flex-grow: 1; padding: 8px;" placeholder="Type your message...">
    <button id="send-button" style="padding: 8px 15px;">Send</button>
  </div>
</div>

<script>
  const messageDisplayArea = document.getElementById('message-display-area') as HTMLDivElement | null;
  const chatInput = document.getElementById('chat-input') as HTMLInputElement | null;
  const sendButton = document.getElementById('send-button') as HTMLButtonElement | null;

  async function sendMessage() {
    if (!chatInput || !messageDisplayArea) {
      console.error('Chat input or message display area not found');
      return;
    }

    const userInputText = chatInput.value.trim();
    if (userInputText === '') {
      return;
    }

    // Display user's message
    const userMessageDiv = document.createElement('div');
    userMessageDiv.textContent = userInputText;
    userMessageDiv.className = 'user-message'; // Apply user message style
    messageDisplayArea.appendChild(userMessageDiv);
    chatInput.value = '';
    messageDisplayArea.scrollTop = messageDisplayArea.scrollHeight;

    // Add "Bot is typing..." indicator
    const botTypingDiv = document.createElement('div');
    botTypingDiv.textContent = 'Bot is typing...';
    botTypingDiv.className = 'bot-typing-indicator';
    messageDisplayArea.appendChild(botTypingDiv);
    messageDisplayArea.scrollTop = messageDisplayArea.scrollHeight;

    try {
      const response = await fetch('/api/ai/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ message: userInputText }),
      });

      botTypingDiv.remove(); // Remove typing indicator once response starts processing

      if (response.ok) {
        const data = await response.json();
        if (data.error) {
          const errorMessageDiv = document.createElement('div');
          errorMessageDiv.textContent = data.error;
          errorMessageDiv.className = 'error-message';
          messageDisplayArea.appendChild(errorMessageDiv);
        } else {
          const aiMessageDiv = document.createElement('div');
          aiMessageDiv.textContent = data.reply;
          aiMessageDiv.className = 'ai-message'; // Apply AI message style
          messageDisplayArea.appendChild(aiMessageDiv);
        }
      } else {
        const errorData = await response.json().catch(() => null); // Try to parse error, but don't fail if not JSON
        const errorMessageDiv = document.createElement('div');
        errorMessageDiv.textContent = errorData?.error || `Error: Could not get response from AI. Status: ${response.status}`;
        errorMessageDiv.className = 'error-message';
        messageDisplayArea.appendChild(errorMessageDiv);
      }
    } catch (error) {
      if (botTypingDiv && botTypingDiv.parentNode) { // Ensure it exists and is in DOM
        botTypingDiv.remove();
      }
      const errorMessageDiv = document.createElement('div');
      errorMessageDiv.textContent = 'Error: Could not connect to the AI service.';
      errorMessageDiv.className = 'error-message';
      if (messageDisplayArea) {
        messageDisplayArea.appendChild(errorMessageDiv);
      }
      console.error('Fetch error:', error);
    } finally {
      if (messageDisplayArea) {
        messageDisplayArea.scrollTop = messageDisplayArea.scrollHeight;
      }
    }
  }

  if (sendButton) {
    sendButton.addEventListener('click', sendMessage);
  }
  if (chatInput) {
    chatInput.addEventListener('keypress', function(event) {
      if (event.key === 'Enter') {
        sendMessage();
      }
    });
  }
</script>

<style>
  /* Optional: Add more refined styles here */
        .user-message {
          text-align: right;
          margin-bottom: 8px;
          padding: 8px 12px;
          background-color: #e1f5fe; /* Light blue for user */
          border-radius: 12px;
          margin-left: auto; /* Push to right */
          max-width: 75%;
          word-wrap: break-word;
        }
        .ai-message {
          text-align: left;
          margin-bottom: 8px;
          padding: 8px 12px;
          background-color: #f0f0f0; /* Light grey for AI */
          border-radius: 12px;
          margin-right: auto; /* Push to left */
          max-width: 75%;
          word-wrap: break-word;
        }
        .bot-typing-indicator {
            text-align: left;
            font-style: italic;
            color: #777;
            margin-bottom: 8px;
            padding: 8px 12px;
            max-width: 75%;
        }
        .error-message {
            text-align: left;
            color: red;
            font-style: italic;
            margin-bottom: 8px;
            padding: 8px 12px;
            background-color: #ffebee;
            border: 1px solid red;
            border-radius: 12px;
            max-width: 75%;
            word-wrap: break-word;
        }
  #chat-container {
    display: flex;
    flex-direction: column;
    height: 100%; /* Fill parent height */
    font-family: sans-serif;
    /* max-width: 500px; Removed to allow filling parent */
    /* margin: 20px auto; Removed to allow filling parent */
    border: 1px solid #ccc; /* Or remove if #chat-panel in ai.astro handles this */
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    box-sizing: border-box; /* Ensure padding and border don't expand beyond 100% height */
  }
  #message-display-area {
    flex-grow: 1; /* Allow message area to take available space */
    border: 1px solid #eee;
    overflow-y: scroll;
    padding: 10px;
    margin-bottom: 10px;
  }
</style>