---
// Component imports
import MainLayout from "./MainLayout.astro";
import PostHeader from "../components/PostHeader.astro";
import ShareButtons from "../components/ShareButtons.astro";
import RelatedPosts from "../components/RelatedPosts.astro";
import AuthorBio from "../components/AuthorBio.astro";
import TableOfContents from "../components/TableOfContents.astro";
import blogsData from "../utils/blogs";

// Get post data
const { frontmatter, headings } = Astro.props;
const { index, date, category, image, minutesRead } = frontmatter;
const { title, description } = blogsData[index];
const author = blogsData[index]["created by"];

// Get related posts (posts with the same category, excluding current post)
const relatedPosts = blogsData
  .filter((post, i) => i !== index && post.category === category)
  .slice(0, 3); // Limit to 3 related posts

// Format the date
const formattedDate = new Date(date).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});

// Calculate reading time if not provided
const readingTime = minutesRead || Math.ceil(headings.length / 2) || 5; // Fallback to 5 minutes
---

<MainLayout {title} {description}>
  <article class="blog-post">
    <PostHeader {title} {description} {date} {category} {image} {author} />
    
    <div class="post-container">
      <div class="post-content">
        <div class="post-metadata">
          <div class="post-info">
            <span class="post-date">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                <line x1="16" y1="2" x2="16" y2="6"></line>
                <line x1="8" y1="2" x2="8" y2="6"></line>
                <line x1="3" y1="10" x2="21" y2="10"></line>
              </svg>
              {formattedDate}
            </span>
            <span class="post-reading-time">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <polyline points="12 6 12 12 16 14"></polyline>
              </svg>
              {readingTime} min read
            </span>
            <a href={`/category/${category}`} class="post-category">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"></path>
                <line x1="7" y1="7" x2="7.01" y2="7"></line>
              </svg>
              {category}
            </a>
          </div>
          <ShareButtons {title} {description} />
        </div>
        
        <div class="content">
          <slot />
        </div>
        
        <div class="post-footer">
          <div class="post-tags">
            <h3>Tags</h3>
            <div class="tags-list">
              <a href={`/category/${category}`} class="tag">{category}</a>
              <a href="/tag/hermitai" class="tag">HermitAI</a>
              <a href="/tag/ai" class="tag">AI</a>
            </div>
          </div>
          
          <AuthorBio {author} />
          
          <div class="post-navigation">
            <a href="/blog" class="back-to-blog">
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="19" y1="12" x2="5" y2="12"></line>
                <polyline points="12 19 5 12 12 5"></polyline>
              </svg>
              Back to Blog
            </a>
          </div>
        </div>
      </div>
      
      <aside class="post-sidebar">
        <div class="sidebar-section toc-section">
          <h3>Table of Contents</h3>
          <TableOfContents {headings} />
        </div>
        
        <div class="sidebar-section related-posts-section">
          <h3>Related Articles</h3>
          <RelatedPosts posts={relatedPosts} />
        </div>
        
        <div class="sidebar-section newsletter-section">
          <h3>Stay Updated</h3>
          <p>Subscribe to our newsletter for the latest updates and insights.</p>
          <form class="newsletter-form">
            <input type="email" placeholder="Your email address" required />
            <button type="submit">Subscribe</button>
          </form>
        </div>
      </aside>
    </div>
  </article>
</MainLayout>

<style>
  .blog-post {
    max-width: 100%;
    margin: 0 auto;
  }

  .post-container {
    display: grid;
    grid-template-columns: minmax(0, 1fr) 300px;
    gap: var(--space-xl);
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 var(--space-md);
  }

  .post-metadata {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--space-md);
    padding-bottom: var(--space-sm);
    border-bottom: 1px solid hsl(var(--txt) / 0.1);
  }

  .post-info {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-sm);
    font-size: var(--fs-sm);
    color: hsl(var(--txt) / 0.7);
  }

  .post-date, .post-reading-time, .post-category {
    display: flex;
    align-items: center;
    gap: var(--space-2xs);
  }

  .post-category {
    color: hsl(var(--accent));
    text-decoration: none;
    transition: color var(--transition-ease-fast);
  }

  .post-category:hover {
    color: hsl(var(--accent) / 0.8);
    text-decoration: underline;
  }

  .content {
    font-size: var(--fs-md);
    line-height: 1.7;
    color: hsl(var(--txt));
  }

  .content :global(h2) {
    font-size: var(--fs-xl);
    margin-top: var(--space-xl);
    margin-bottom: var(--space-md);
    color: hsl(var(--txt));
  }

  .content :global(h3) {
    font-size: var(--fs-lg);
    margin-top: var(--space-lg);
    margin-bottom: var(--space-sm);
    color: hsl(var(--txt));
  }

  .content :global(p) {
    margin-bottom: var(--space-md);
  }

  .content :global(ul), .content :global(ol) {
    margin-bottom: var(--space-md);
    padding-left: var(--space-lg);
  }

  .content :global(li) {
    margin-bottom: var(--space-xs);
  }

  .content :global(img) {
    max-width: 100%;
    height: auto;
    border-radius: var(--radius-md);
    margin: var(--space-md) 0;
  }

  .content :global(blockquote) {
    border-left: 4px solid hsl(var(--accent));
    padding-left: var(--space-md);
    margin: var(--space-lg) 0;
    font-style: italic;
    color: hsl(var(--txt) / 0.8);
  }

  .content :global(pre) {
    background-color: hsl(var(--bkg) / 0.5);
    padding: var(--space-md);
    border-radius: var(--radius-md);
    overflow-x: auto;
    margin: var(--space-md) 0;
  }

  .content :global(code) {
    font-family: monospace;
    background-color: hsl(var(--txt) / 0.1);
    padding: 0.2em 0.4em;
    border-radius: var(--radius-sm);
    font-size: 0.9em;
  }

  .content :global(pre code) {
    background-color: transparent;
    padding: 0;
  }

  .post-footer {
    margin-top: var(--space-xl);
    padding-top: var(--space-lg);
    border-top: 1px solid hsl(var(--txt) / 0.1);
    display: flex;
    flex-direction: column;
    gap: var(--space-lg);
  }

  .post-tags h3 {
    font-size: var(--fs-md);
    margin-bottom: var(--space-sm);
  }

  .tags-list {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-xs);
  }

  .tag {
    display: inline-block;
    padding: var(--space-2xs) var(--space-sm);
    background-color: hsl(var(--txt) / 0.1);
    color: hsl(var(--txt));
    border-radius: var(--radius-full);
    font-size: var(--fs-sm);
    text-decoration: none;
    transition: background-color var(--transition-ease-fast);
  }

  .tag:hover {
    background-color: hsl(var(--accent) / 0.2);
    color: hsl(var(--accent));
    text-decoration: none;
  }

  .post-navigation {
    display: flex;
    justify-content: space-between;
    margin-top: var(--space-md);
  }

  .back-to-blog {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
    color: hsl(var(--txt));
    text-decoration: none;
    transition: color var(--transition-ease-fast);
  }

  .back-to-blog:hover {
    color: hsl(var(--accent));
    text-decoration: none;
  }

  .post-sidebar {
    position: sticky;
    top: var(--space-lg);
    display: flex;
    flex-direction: column;
    gap: var(--space-xl);
    height: fit-content;
  }

  .sidebar-section {
    background-color: hsl(var(--bkg));
    border-radius: var(--radius-md);
    padding: var(--space-md);
    box-shadow: var(--shadow-sm);
  }

  .sidebar-section h3 {
    font-size: var(--fs-md);
    margin-bottom: var(--space-md);
    color: hsl(var(--txt));
    border-bottom: 1px solid hsl(var(--txt) / 0.1);
    padding-bottom: var(--space-xs);
  }

  .newsletter-section p {
    margin-bottom: var(--space-md);
    font-size: var(--fs-sm);
    color: hsl(var(--txt) / 0.8);
  }

  .newsletter-form {
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
  }

  .newsletter-form input {
    padding: var(--space-sm);
    border: 1px solid hsl(var(--txt) / 0.2);
    border-radius: var(--radius-md);
    background-color: hsl(var(--bkg));
    color: hsl(var(--txt));
    font-size: var(--fs-sm);
  }

  .newsletter-form button {
    padding: var(--space-sm);
    background-color: hsl(var(--accent));
    color: white;
    border: none;
    border-radius: var(--radius-md);
    font-size: var(--fs-sm);
    font-weight: 500;
    cursor: pointer;
    transition: background-color var(--transition-ease-fast);
  }

  .newsletter-form button:hover {
    background-color: hsl(var(--accent) / 0.9);
  }

  /* Responsive styles */
  @media (max-width: 992px) {
    .post-container {
      grid-template-columns: 1fr;
    }

    .post-sidebar {
      position: static;
      margin-top: var(--space-xl);
    }
  }

  @media (max-width: 768px) {
    .post-metadata {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--space-sm);
    }

    .post-info {
      width: 100%;
    }
  }

  @media (max-width: 480px) {
    .post-info {
      flex-direction: column;
      gap: var(--space-xs);
    }
  }
</style>

<script>
  // Smooth scrolling for table of contents links
  document.addEventListener('DOMContentLoaded', () => {
    const tocLinks = document.querySelectorAll('.toc-link');
    
    tocLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        
        const targetId = link.getAttribute('href').substring(1);
        const targetElement = document.getElementById(targetId);
        
        if (targetElement) {
          window.scrollTo({
            top: targetElement.offsetTop - 100, // Offset for fixed header
            behavior: 'smooth'
          });
          
          // Update URL without scrolling
          history.pushState(null, null, `#${targetId}`);
          
          // Add active class to the clicked link
          tocLinks.forEach(l => l.classList.remove('active'));
          link.classList.add('active');
        }
      });
    });
    
    // Highlight active section on scroll
    const observeHeaders = () => {
      const headers = document.querySelectorAll('h2, h3, h4');
      
      if (headers.length === 0) return;
      
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const id = entry.target.id;
              tocLinks.forEach(link => {
                link.classList.remove('active');
                if (link.getAttribute('href') === `#${id}`) {
                  link.classList.add('active');
                }
              });
            }
          });
        },
        { rootMargin: '-100px 0px -80% 0px' }
      );
      
      headers.forEach(header => {
        if (header.id) {
          observer.observe(header);
        }
      });
    };
    
    // Call the function after a short delay to ensure content is rendered
    setTimeout(observeHeaders, 100);
    
    // Newsletter form submission
    const newsletterForm = document.querySelector('.newsletter-form');
    if (newsletterForm) {
      newsletterForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const emailInput = newsletterForm.querySelector('input[type="email"]');
        const email = emailInput.value;
        
        // Here you would typically send this to your newsletter service
        // For now, we'll just show a success message
        
        newsletterForm.innerHTML = `
          <div class="newsletter-success">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
              <polyline points="22 4 12 14.01 9 11.01"></polyline>
            </svg>
            <p>Thanks for subscribing! We'll be in touch soon.</p>
          </div>
        `;
      });
    }
  });
  
  // Add copy button to code blocks
  document.addEventListener('DOMContentLoaded', () => {
    const codeBlocks = document.querySelectorAll('pre');
    
    codeBlocks.forEach(block => {
      const copyButton = document.createElement('button');
      copyButton.className = 'copy-code-button';
      copyButton.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
          <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
        </svg>
        Copy
      `;
      
      // Style the button
      copyButton.style.position = 'absolute';
      copyButton.style.top = '8px';
      copyButton.style.right = '8px';
      copyButton.style.padding = '4px 8px';
      copyButton.style.backgroundColor = 'rgba(0, 0, 0, 0.3)';
      copyButton.style.color = 'white';
      copyButton.style.border = 'none';
      copyButton.style.borderRadius = '4px';
      copyButton.style.fontSize = '12px';
      copyButton.style.cursor = 'pointer';
      copyButton.style.display = 'flex';
      copyButton.style.alignItems = 'center';
      copyButton.style.gap = '4px';
      
      // Make the pre position relative for absolute positioning of the button
      block.style.position = 'relative';
      
      // Add the button to the code block
      block.appendChild(copyButton);
      
      // Add click event
      copyButton.addEventListener('click', () => {
        const code = block.querySelector('code');
        const text = code ? code.innerText : block.innerText;
        
        navigator.clipboard.writeText(text).then(() => {
          copyButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
              <polyline points="22 4 12 14.01 9 11.01"></polyline>
            </svg>
            Copied!
          `;
          
          setTimeout(() => {
            copyButton.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
              </svg>
              Copy
            `;
          }, 2000);
        });
      });
    });
  });
</script>