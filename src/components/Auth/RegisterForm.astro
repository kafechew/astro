---
// src/components/Auth/RegisterForm.astro
---

<div class="auth-page">
  <div class="auth-container">
    <div class="auth-content">
      <div class="auth-header">
        <h1>Create Account</h1>
        <p>Join us to get started with HermitAI</p>
      </div>
      
      <form id="registerForm" class="auth-form">
        <div class="form-group">
          <label for="username">Username</label>
          <div class="input-wrapper">
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
              <circle cx="12" cy="7" r="4"></circle>
            </svg>
            <input type="text" id="username" name="username" placeholder="Choose a username" required />
          </div>
          <div class="input-hint">Username must be 3-20 characters and can only contain letters, numbers, and underscores.</div>
        </div>
        
        <div class="form-group">
          <label for="email">Email Address</label>
          <div class="input-wrapper">
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path>
              <polyline points="22,6 12,13 2,6"></polyline>
            </svg>
            <input type="email" id="email" name="email" placeholder="Enter your email address" required />
          </div>
          <div class="input-hint">We'll send a verification email to this address.</div>
        </div>
        
        <div class="form-group">
          <label for="password">Password</label>
          <div class="input-wrapper">
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
              <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
            </svg>
            <input type="password" id="password" name="password" placeholder="Create a password" required />
            <button type="button" class="toggle-password" aria-label="Toggle password visibility">
              <svg class="show-password" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                <circle cx="12" cy="12" r="3"></circle>
              </svg>
              <svg class="hide-password" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path>
                <line x1="1" y1="1" x2="23" y2="23"></line>
              </svg>
            </button>
          </div>
          <div class="password-strength">
            <div class="strength-meter">
              <div class="strength-segment"></div>
              <div class="strength-segment"></div>
              <div class="strength-segment"></div>
              <div class="strength-segment"></div>
            </div>
            <div class="strength-text">Password strength: <span id="strength-value">Weak</span></div>
          </div>
          <div class="input-hint">Password must be at least 8 characters and include a mix of letters, numbers, and symbols.</div>
        </div>
        
        <div class="form-group">
          <label for="confirmPassword">Confirm Password</label>
          <div class="input-wrapper">
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
              <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
            </svg>
            <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm your password" required />
          </div>
        </div>
        
        <div class="form-group terms-checkbox">
          <label class="checkbox-container">
            <input type="checkbox" id="terms" name="terms" required />
            <span class="checkmark"></span>
            I agree to the <a href="/terms" target="_blank">Terms of Service</a> and <a href="/privacy" target="_blank">Privacy Policy</a>
          </label>
        </div>
        
        <div class="form-group">
          <button type="submit" class="submit-button">
            <span>Create Account</span>
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
              <circle cx="8.5" cy="7" r="4"></circle>
              <line x1="20" y1="8" x2="20" y2="14"></line>
              <line x1="23" y1="11" x2="17" y2="11"></line>
            </svg>
          </button>
        </div>
        
        <div id="message" class="form-message"></div>
      </form>

      <div class="auth-divider">
        <span>OR</span>
      </div>
      
      <div class="social-login">
        <button type="button" class="social-button google">
          <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24">
            <path d="M12.545,10.239v3.821h5.445c-0.712,2.315-2.647,3.972-5.445,3.972c-3.332,0-6.033-2.701-6.033-6.032s2.701-6.032,6.033-6.032c1.498,0,2.866,0.549,3.921,1.453l2.814-2.814C17.503,2.988,15.139,2,12.545,2C7.021,2,2.543,6.477,2.543,12s4.478,10,10.002,10c8.396,0,10.249-7.85,9.426-11.748L12.545,10.239z" fill="currentColor"/>
          </svg>
          Sign up with Google
        </button>
      </div>
      
      <div class="auth-footer">
        <p>Already have an account? <a href="/login">Sign in</a></p>
      </div>
    </div>
    
    <div class="auth-image">
      <div class="image-overlay">
        <div class="brand-logo">
          <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M12 2a8 8 0 0 1 8 8v12a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V10a8 8 0 0 1 8-8z"></path>
            <path d="M9 19h6"></path>
            <path d="M9 15h6"></path>
            <circle cx="12" cy="7" r="1"></circle>
          </svg>
          <span>HermitAI</span>
        </div>
        <div class="image-content">
          <h2>Your Personal AI Twin</h2>
          <p>Experience the next generation of AI assistants that understand your knowledge and adapt to your needs.</p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  const form = document.getElementById('registerForm');
  const messageDiv = document.getElementById('message');
  const passwordInput = document.getElementById('password') as HTMLInputElement;
  const confirmPasswordInput = document.getElementById('confirmPassword') as HTMLInputElement;
  const togglePasswordButton = document.querySelector('.toggle-password');
  const strengthMeter = document.querySelector('.strength-meter');
  const strengthSegments = document.querySelectorAll('.strength-segment');
  const strengthValue = document.getElementById('strength-value');
  
  // Toggle password visibility
  if (togglePasswordButton && passwordInput) {
    togglePasswordButton.addEventListener('click', () => {
      const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
      passwordInput.setAttribute('type', type);
      
      if (confirmPasswordInput) {
        confirmPasswordInput.setAttribute('type', type);
      }
      
      togglePasswordButton.classList.toggle('show');
    });
  }
  
  // Password strength checker
  if (passwordInput && strengthSegments.length > 0 && strengthValue) {
    passwordInput.addEventListener('input', () => {
      const password = passwordInput.value;
      const strength = checkPasswordStrength(password);
      
      // Update strength meter
      strengthSegments.forEach((segment, index) => {
        if (index < strength.score) {
          segment.className = `strength-segment strength-${strength.level}`;
        } else {
          segment.className = 'strength-segment';
        }
      });
      
      // Update strength text
      strengthValue.textContent = strength.level;
      strengthValue.className = `strength-${strength.level}`;
    });
  }
  
  // Check password strength
  function checkPasswordStrength(password) {
    let score = 0;
    let level = 'Weak';
    
    // Length check
    if (password.length >= 8) score++;
    if (password.length >= 12) score++;
    
    // Complexity checks
    if (/[A-Z]/.test(password)) score++;
    if (/[a-z]/.test(password)) score++;
    if (/[0-9]/.test(password)) score++;
    if (/[^A-Za-z0-9]/.test(password)) score++;
    
    // Determine strength level
    if (score === 0) {
      level = 'Weak';
    } else if (score <= 2) {
      level = 'Fair';
    } else if (score <= 4) {
      level = 'Good';
    } else {
      level = 'Strong';
    }
    
    return { score: Math.min(score, 4), level };
  }
  
  // Username validation
  const usernameInput = document.getElementById('username') as HTMLInputElement;
  if (usernameInput) {
    usernameInput.addEventListener('input', () => {
      const username = usernameInput.value;
      const isValid = /^[a-zA-Z0-9_]{3,20}$/.test(username);
      
      if (isValid) {
        usernameInput.setCustomValidity('');
      } else {
        usernameInput.setCustomValidity('Username must be 3-20 characters and can only contain letters, numbers, and underscores.');
      }
    });
  }
  
  // Email validation
  const emailInput = document.getElementById('email') as HTMLInputElement;
  if (emailInput) {
    emailInput.addEventListener('input', () => {
      const email = emailInput.value;
      const isValid = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
      
      if (isValid) {
        emailInput.setCustomValidity('');
      } else {
        emailInput.setCustomValidity('Please enter a valid email address.');
      }
    });
  }
  
  // Password match validation
  if (confirmPasswordInput && passwordInput) {
    confirmPasswordInput.addEventListener('input', () => {
      if (confirmPasswordInput.value !== passwordInput.value) {
        confirmPasswordInput.setCustomValidity('Passwords do not match.');
      } else {
        confirmPasswordInput.setCustomValidity('');
      }
    });
    
    passwordInput.addEventListener('input', () => {
      if (confirmPasswordInput.value && confirmPasswordInput.value !== passwordInput.value) {
        confirmPasswordInput.setCustomValidity('Passwords do not match.');
      } else {
        confirmPasswordInput.setCustomValidity('');
      }
    });
  }

  // Form submission
  if (form) {
    form.addEventListener('submit', async (event) => {
      event.preventDefault();
      
      if (!messageDiv) return;
      
      // Clear previous messages
      messageDiv.textContent = '';
      messageDiv.className = 'form-message';
      
      // Get form values
      const usernameInput = document.getElementById('username') as HTMLInputElement;
      const emailInput = document.getElementById('email') as HTMLInputElement;
      const passwordInput = document.getElementById('password') as HTMLInputElement;
      const confirmPasswordInput = document.getElementById('confirmPassword') as HTMLInputElement;
      const termsInput = document.getElementById('terms') as HTMLInputElement;
      
      if (!usernameInput || !emailInput || !passwordInput || !confirmPasswordInput || !termsInput) return;
      
      const username = usernameInput.value.trim();
      const email = emailInput.value.trim();
      const password = passwordInput.value;
      const confirmPassword = confirmPasswordInput.value;
      const termsAccepted = termsInput.checked;
      
      // Client-side validation
      if (password !== confirmPassword) {
        messageDiv.textContent = 'Passwords do not match.';
        messageDiv.classList.add('error');
        return;
      }
      
      if (!termsAccepted) {
        messageDiv.textContent = 'You must accept the Terms of Service and Privacy Policy.';
        messageDiv.classList.add('error');
        return;
      }
      
      // Validate username format
      if (!/^[a-zA-Z0-9_]{3,20}$/.test(username)) {
        messageDiv.textContent = 'Username must be 3-20 characters and can only contain letters, numbers, and underscores.';
        messageDiv.classList.add('error');
        return;
      }
      
      // Validate email format
      if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
        messageDiv.textContent = 'Please enter a valid email address.';
        messageDiv.classList.add('error');
        return;
      }
      
      // Validate password strength
      if (password.length < 8) {
        messageDiv.textContent = 'Password must be at least 8 characters long.';
        messageDiv.classList.add('error');
        return;
      }
      
      // Disable submit button and show loading state
      const submitButton = form.querySelector('button[type="submit"]');
      if (submitButton) {
        const originalText = submitButton.innerHTML;
        submitButton.disabled = true;
        submitButton.innerHTML = `
          <svg class="animate-spin -ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Creating account...
        `;
      }
      
      try {
        const response = await fetch('/api/auth/register', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ username, email, password }),
        });

        const data = await response.json();

        if (response.ok) {
          messageDiv.textContent = data.message || 'Registration successful! Please check your email to verify your account.';
          messageDiv.classList.add('success');
          
          // Redirect after a short delay
          setTimeout(() => {
            window.location.href = data.redirectUrl || '/profile';
          }, 1500);
        } else {
          messageDiv.textContent = data.message || 'Registration failed. Please try again.';
          messageDiv.classList.add('error');
          
          // Re-enable submit button
          if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = originalText;
          }
        }
      } catch (error) {
        console.error('Registration error:', error);
        messageDiv.textContent = 'An error occurred during registration. Please try again.';
        messageDiv.classList.add('error');
        
        // Re-enable submit button
        if (submitButton) {
          submitButton.disabled = false;
          submitButton.innerHTML = originalText;
        }
      }
    });
  }
  
  // Social signup (placeholder)
  const socialButtons = document.querySelectorAll('.social-button');
  socialButtons.forEach(button => {
    button.addEventListener('click', () => {
      alert('Social signup is not implemented yet.');
    });
  });
</script>

<style>
  .auth-page {
    min-height: calc(100vh - 120px); /* Adjust based on your header/footer height */
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--space-md);
  }
  
  .auth-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    width: 100%;
    max-width: 1200px;
    min-height: 600px;
    background-color: hsl(var(--bkg));
    border-radius: var(--radius-lg);
    overflow: hidden;
    box-shadow: var(--shadow-lg);
  }
  
  .auth-content {
    padding: var(--space-xl);
    display: flex;
    flex-direction: column;
    justify-content: center;
    max-width: 500px;
    margin: 0 auto;
    width: 100%;
  }
  
  .auth-header {
    margin-bottom: var(--space-lg);
  }
  
  .auth-header h1 {
    font-size: var(--fs-3xl);
    color: hsl(var(--txt));
    margin-bottom: var(--space-xs);
  }
  
  .auth-header p {
    color: hsl(var(--txt) / 0.7);
    font-size: var(--fs-lg);
  }
  
  .auth-form {
    width: 100%;
  }
  
  .form-group {
    margin-bottom: var(--space-md);
  }
  
  .form-group label {
    display: block;
    margin-bottom: var(--space-xs);
    font-weight: 500;
    color: hsl(var(--txt));
  }
  
  .input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
  }
  
  .input-wrapper svg {
    position: absolute;
    left: var(--space-sm);
    color: hsl(var(--txt) / 0.5);
  }
  
  .input-wrapper input {
    width: 100%;
    padding: var(--space-sm) var(--space-sm) var(--space-sm) calc(var(--space-sm) * 2 + 18px);
    border: 1px solid hsl(var(--txt) / 0.2);
    border-radius: var(--radius-md);
    background-color: hsl(var(--bkg));
    color: hsl(var(--txt));
    font-size: var(--fs-md);
    transition: border-color var(--transition-ease-fast), box-shadow var(--transition-ease-fast);
  }
  
  .input-wrapper input:focus {
    outline: none;
    border-color: hsl(var(--accent));
    box-shadow: 0 0 0 2px hsl(var(--accent) / 0.2);
  }
  
  .input-wrapper input:invalid {
    border-color: hsl(0, 76%, 50%);
  }
  
  .input-hint {
    margin-top: var(--space-xs);
    font-size: var(--fs-sm);
    color: hsl(var(--txt) / 0.6);
  }
  
  .toggle-password {
    position: absolute;
    right: var(--space-sm);
    background: none;
    border: none;
    color: hsl(var(--txt) / 0.5);
    cursor: pointer;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .toggle-password .hide-password {
    display: none;
  }
  
  .toggle-password.show .show-password {
    display: none;
  }
  
  .toggle-password.show .hide-password {
    display: block;
  }
  
  .password-strength {
    margin-top: var(--space-xs);
  }
  
  .strength-meter {
    display: flex;
    gap: 4px;
    margin-bottom: 4px;
  }
  
  .strength-segment {
    height: 4px;
    flex: 1;
    background-color: hsl(var(--txt) / 0.1);
    border-radius: var(--radius-full);
  }
  
  .strength-segment.strength-Weak {
    background-color: hsl(0, 76%, 50%);
  }
  
  .strength-segment.strength-Fair {
    background-color: hsl(30, 76%, 50%);
  }
  
  .strength-segment.strength-Good {
    background-color: hsl(60, 76%, 50%);
  }
  
  .strength-segment.strength-Strong {
    background-color: hsl(120, 76%, 50%);
  }
  
  .strength-text {
    font-size: var(--fs-sm);
    color: hsl(var(--txt) / 0.7);
  }
  
  .strength-Weak {
    color: hsl(0, 76%, 50%);
  }
  
  .strength-Fair {
    color: hsl(30, 76%, 50%);
  }
  
  .strength-Good {
    color: hsl(60, 76%, 50%);
  }
  
  .strength-Strong {
    color: hsl(120, 76%, 50%);
  }
  
  .terms-checkbox {
    margin-top: var(--space-md);
  }
  
  .checkbox-container {
    display: flex;
    align-items: center;
    cursor: pointer;
    font-size: var(--fs-sm);
    color: hsl(var(--txt) / 0.8);
    user-select: none;
  }
  
  .checkbox-container a {
    color: hsl(var(--accent));
    text-decoration: none;
  }
  
  .checkbox-container a:hover {
    text-decoration: underline;
  }
  
  .checkbox-container input {
    position: absolute;
    opacity: 0;
    cursor: pointer;
    height: 0;
    width: 0;
  }
  
  .checkmark {
    position: relative;
    display: inline-block;
    height: 18px;
    width: 18px;
    margin-right: var(--space-xs);
    background-color: hsl(var(--bkg));
    border: 1px solid hsl(var(--txt) / 0.3);
    border-radius: var(--radius-sm);
    transition: all var(--transition-ease-fast);
    flex-shrink: 0;
  }
  
  .checkbox-container:hover input ~ .checkmark {
    border-color: hsl(var(--txt) / 0.5);
  }
  
  .checkbox-container input:checked ~ .checkmark {
    background-color: hsl(var(--accent));
    border-color: hsl(var(--accent));
  }
  
  .checkmark:after {
    content: "";
    position: absolute;
    display: none;
  }
  
  .checkbox-container input:checked ~ .checkmark:after {
    display: block;
  }
  
  .checkbox-container .checkmark:after {
    left: 6px;
    top: 2px;
    width: 5px;
    height: 10px;
    border: solid white;
    border-width: 0 2px 2px 0;
    transform: rotate(45deg);
  }
  
  .submit-button {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-sm);
    padding: var(--space-sm) var(--space-md);
    background-color: hsl(var(--accent));
    color: white;
    border: none;
    border-radius: var(--radius-md);
    font-size: var(--fs-md);
    font-weight: 500;
    cursor: pointer;
    transition: background-color var(--transition-ease-fast), transform var(--transition-ease-fast);
  }
  
  .submit-button:hover {
    background-color: hsl(var(--accent) / 0.9);
    transform: translateY(-1px);
  }
  
  .submit-button:active {
    transform: translateY(0);
  }
  
  .submit-button:disabled {
    background-color: hsl(var(--txt) / 0.3);
    cursor: not-allowed;
    transform: none;
  }
  
  .form-message {
    margin-top: var(--space-md);
    padding: var(--space-sm);
    border-radius: var(--radius-md);
    font-size: var(--fs-sm);
    text-align: center;
    display: none;
  }
  
  .form-message.success {
    display: block;
    background-color: hsl(142, 76%, 95%);
    color: hsl(142, 76%, 36%);
  }
  
  .form-message.error {
    display: block;
    background-color: hsl(0, 76%, 95%);
    color: hsl(0, 76%, 36%);
  }
  
  .auth-divider {
    position: relative;
    text-align: center;
    margin: var(--space-lg) 0;
  }
  
  .auth-divider::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    height: 1px;
    background-color: hsl(var(--txt) / 0.1);
  }
  
  .auth-divider span {
    position: relative;
    padding: 0 var(--space-sm);
    background-color: hsl(var(--bkg));
    color: hsl(var(--txt) / 0.7);
    font-size: var(--fs-sm);
  }
  
  .social-login {
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
  }
  
  .social-button {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-sm);
    padding: var(--space-sm);
    background-color: transparent;
    color: hsl(var(--txt));
    border: 1px solid hsl(var(--txt) / 0.2);
    border-radius: var(--radius-md);
    font-size: var(--fs-md);
    cursor: pointer;
    transition: background-color var(--transition-ease-fast);
  }
  
  .social-button:hover {
    background-color: hsl(var(--txt) / 0.05);
  }
  
  .social-button.google {
    color: #4285F4;
  }
  
  .auth-footer {
    margin-top: var(--space-lg);
    text-align: center;
    font-size: var(--fs-sm);
    color: hsl(var(--txt) / 0.7);
  }
  
  .auth-footer a {
    color: hsl(var(--accent));
    text-decoration: none;
    font-weight: 500;
  }
  
  .auth-footer a:hover {
    text-decoration: underline;
  }
  
  .auth-image {
    background-image: url('/images/register-bg.jpg');
    background-size: cover;
    background-position: center;
    position: relative;
  }
  
  .image-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(to bottom, rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.4));
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    padding: var(--space-xl);
    color: white;
  }
  
  .brand-logo {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    font-size: var(--fs-xl);
    font-weight: bold;
  }
  
  .image-content {
    max-width: 400px;
  }
  
  .image-content h2 {
    font-size: var(--fs-2xl);
    margin-bottom: var(--space-md);
  }
  
  .image-content p {
    font-size: var(--fs-lg);
    opacity: 0.9;
  }
  
  /* Responsive styles */
  @media (max-width: 992px) {
    .auth-container {
      grid-template-columns: 1fr;
      max-width: 600px;
    }
    
    .auth-image {
      display: none;
    }
  }
  
  @media (max-width: 480px) {
    .auth-page {
      padding: var(--space-sm);
    }
    
    .auth-content {
      padding: var(--space-lg) var(--space-md);
    }
    
    .auth-header h1 {
      font-size: var(--fs-2xl);
    }
    
    .auth-header p {
      font-size: var(--fs-md);
    }
  }
</style>