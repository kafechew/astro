---
// No server-side logic needed for this basic form component
---
<style>
  /* Minimalist form styles */
  #qnaForm {
    display: flex; /* Arrange items horizontally */
    align-items: center; /* Align items vertically */
    gap: 0.5rem; /* Space between items */
    margin-bottom: 1rem; /* Space below the form */
  }
  #qnaForm select,
  #qnaForm textarea,
  #qnaForm button {
    padding: 0.5rem;
    border: 1px solid #ccc; /* Use theme variable later if needed */
    border-radius: 4px;
    font-size: 1rem; /* Consistent font size */
    margin: 0; /* Remove default margins */
  }
  #qnaForm select {
    flex-grow: 0; /* Don't let select grow */
    min-width: 150px; /* Give select a minimum width */
  }
  #qnaForm textarea {
    flex-grow: 1; /* Allow textarea to take remaining space */
    resize: vertical; /* Allow vertical resize */
    min-height: calc(1rem + 1rem + 2px); /* Match button height initially */
    line-height: 1.2; /* Adjust line height for better text fit */
  }
  #qnaForm button {
    flex-grow: 0; /* Don't let button grow */
    background-color: hsl(var(--accent)); /* Use theme accent color */
    color: hsl(var(--bkg)); /* Use theme background for text */
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1rem;
  }
  #qnaForm button:hover {
    opacity: 0.8; /* Use opacity for hover effect consistent with theme */
  }
  #responseArea {
    margin-top: 1rem;
    padding: 1rem 1rem 1rem 0; /* Removed left padding */
    /* border: 1px solid hsl(var(--txt) / 0.2); */ /* Use theme text color with alpha */
    /* border-radius: 4px; */ /* Removed border radius as well */
    /* background-color: hsl(var(--muted)); */ /* Use theme muted color */
    min-height: 50px;
    /* white-space: pre-wrap; is removed as marked handles formatting */
  }
  .error {
    color: red;
    font-weight: bold;
  }
</style>

<form id="qnaForm">
  <input type="hidden" id="currentUserIdInput" name="userId" value="newuser"> <!-- User ID is now set globally -->
  <!-- Removed divs and labels -->
  <select id="documentTag" name="documentTag" required>
    <option value="" disabled selected>Select Topic...</option> <!-- Placeholder text -->
    <option value="Triune Brain Model, Hedohedonic treadmill & neurotransmitter">Triune Brain</option>
    <option value="Modern Hermit Philosophy (physical health, mental mastery & irrelevant finance)">Hermit Philosophy</option>
    <option value="Bitcoin, Lightning & LSP">Bitcoin</option>
  </select>
  <textarea id="question" name="question" required placeholder="Ask a question..."></textarea> <!-- Placeholder text -->
  <button type="submit">Ask</button> <!-- Shortened button text -->
</form>

<div id="responseArea">
  <!-- Response or errors will be displayed here -->
</div>

<script>
  import { marked } from 'marked'; // Import marked

  const form = document.getElementById('qnaForm');
  const responseArea = document.getElementById('responseArea');
  // userIdSelect is removed as the element is now in UserSelector.astro
  const documentTagInput = document.getElementById('documentTag') as HTMLSelectElement;
  const questionInput = document.getElementById('question') as HTMLTextAreaElement;

// Add event listener for Enter key press on the textarea
  if (questionInput) {
    questionInput.addEventListener('keydown', (event) => {
      // Check if Enter key was pressed without the Shift key
      if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault(); // Prevent adding a newline
        // Trigger the form submission
        form?.requestSubmit(); // Use optional chaining in case form is null
      }
    });
  }
  // Event listener for userId change removed, handled in UserSelector.astro and index.astro
  if (form) {
    form.addEventListener('submit', async (event) => {
      event.preventDefault(); // Prevent default form submission

      const userIdInput = document.getElementById('currentUserIdInput') as HTMLInputElement;
      const userId = userIdInput ? userIdInput.value : 'newuser'; // Get value from hidden input
      const documentTag = documentTagInput.value;
      const question = questionInput.value;

      if (!documentTag || !question) {
          if (responseArea) {
            responseArea.textContent = 'Please fill in both Document Tag and Question.';
            responseArea.classList.add('error');
          }
          return;
      }

      if (responseArea) {
        responseArea.textContent = 'Loading...';
        responseArea.classList.remove('error'); // Clear previous errors
      }

      try {
        const response = await fetch('/api/askQna.json', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ userId, question, documentTag }),
        });

        const responseJson = await response.json();

        if (responseArea) {
          if (response.ok && responseJson.success) {
            // Use marked to parse the markdown answer and set innerHTML
            responseArea.innerHTML = marked.parse(responseJson.answer);
            responseArea.classList.remove('error'); // Ensure error class is removed on success
          } else {
            responseArea.textContent = `Error: ${responseJson.error || 'Unauthorized or API error.'}`;
            responseArea.classList.add('error');
          }
        }
      } catch (error) {
        console.error('Fetch error:', error);
        if (responseArea) {
          responseArea.textContent = 'Failed to fetch response. Check the console for details.';
          responseArea.classList.add('error');
        }
      }
    });
  }
</script>