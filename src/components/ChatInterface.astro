<div class="chat-container">
  <div class="chat-header">
    <h2>hermitAI</h2>
    <div class="chat-controls">
      <button id="clear-chat" class="link secondary" title="Clear conversation">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M3 6h18"></path>
          <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path>
          <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path>
        </svg>
        Clear
      </button>
    </div>
  </div>
  
  <div id="message-display-area" class="message-display">
    <!-- Messages will be added here dynamically -->
  </div>
  
  <div id="input-area" class="input-area">
    <textarea id="chat-input" placeholder="Type your message..." rows="1"></textarea>
    <button id="send-button" class="send-button" title="Send message">
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <line x1="22" y1="2" x2="11" y2="13"></line>
        <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
      </svg>
    </button>
  </div>
  
  <div class="chat-footer">
    <div class="credits-info">
      <span>Credits: </span>
      <span id="chat-credit-display">${Astro.locals.user?.credits ?? 0}</span>
    </div>
    <div class="chat-info">
      <small>Messages are processed using AI and may not always be accurate.</small>
    </div>
  </div>
</div>

<script>
  import { marked } from 'marked';
  
  // Configure marked
  marked.setOptions({
    breaks: true,
    gfm: true
  });
  
  // DOM Elements
  const messageDisplayArea = document.getElementById('message-display-area') as HTMLElement | null;
  const chatInput = document.getElementById('chat-input') as HTMLInputElement | null;
  const sendButton = document.getElementById('send-button') as HTMLButtonElement | null;
  const clearChatButton = document.getElementById('clear-chat') as HTMLButtonElement | null;
  const chatCreditDisplay = document.getElementById('chat-credit-display') as HTMLElement | null;
  
  // Auto-resize textarea as user types
  if (chatInput) {
    chatInput.addEventListener('input', function(this: HTMLInputElement) {
      this.style.height = 'auto';
      const newHeight = Math.min(this.scrollHeight, 150); // Max height of 150px
      this.style.height = newHeight + 'px';
    });
  }
  
  // Clear chat history
  if (clearChatButton) {
    clearChatButton.addEventListener('click', function() {
      if (messageDisplayArea) {
        // Add welcome message
        messageDisplayArea.innerHTML = '';
        
        // Add a welcome message
        const messageContainer = document.createElement('div');
        messageContainer.className = 'message-container ai-message-container';
        
        const aiAvatar = document.createElement('div');
        aiAvatar.className = 'ai-avatar';
        aiAvatar.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M12 2a8 8 0 0 1 8 8v12a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V10a8 8 0 0 1 8-8z"></path>
            <path d="M9 19h6"></path>
            <path d="M9 15h6"></path>
            <circle cx="12" cy="7" r="1"></circle>
          </svg>
        `;
        
        const aiMessageDiv = document.createElement('div');
        aiMessageDiv.className = 'message ai-message';
        aiMessageDiv.innerHTML = '<p>Hello! I\'m your AI assistant. How can I help you today?</p>';
        
        messageContainer.appendChild(aiAvatar);
        messageContainer.appendChild(aiMessageDiv);
        messageDisplayArea.appendChild(messageContainer);
      }
    });
  }

  async function sendMessage() {
    if (!chatInput || !messageDisplayArea) {
      console.error('Chat input or message display area not found');
      return;
    }

    const userInputText = chatInput.value.trim();
    if (userInputText === '') {
      return;
    }

    // Create user message container
    const userMessageContainer = document.createElement('div');
    userMessageContainer.className = 'message-container user-message-container';
    
    // Create user avatar (optional)
    const userAvatar = document.createElement('div');
    userAvatar.className = 'user-avatar';
    userAvatar.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
        <circle cx="12" cy="7" r="4"></circle>
      </svg>
    `;
    
    // Create user message
    const userMessageDiv = document.createElement('div');
    userMessageDiv.className = 'message user-message';
    userMessageDiv.textContent = userInputText;
    
    // Add timestamp to user message
    const userTimestamp = document.createElement('div');
    userTimestamp.className = 'message-timestamp';
    userTimestamp.textContent = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    userMessageDiv.appendChild(userTimestamp);
    
    userMessageContainer.appendChild(userMessageDiv);
    userMessageContainer.appendChild(userAvatar);
    messageDisplayArea.appendChild(userMessageContainer);
    
    // Reset input and scroll to bottom
    chatInput.value = '';
    chatInput.style.height = 'auto'; // Reset height
    messageDisplayArea.scrollTop = messageDisplayArea.scrollHeight;

    // Create AI message container
    const aiMessageContainer = document.createElement('div');
    aiMessageContainer.className = 'message-container ai-message-container';
    
    // Create AI avatar
    const aiAvatar = document.createElement('div');
    aiAvatar.className = 'ai-avatar';
    aiAvatar.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M12 2a8 8 0 0 1 8 8v12a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V10a8 8 0 0 1 8-8z"></path>
        <path d="M9 19h6"></path>
        <path d="M9 15h6"></path>
        <circle cx="12" cy="7" r="1"></circle>
      </svg>
    `;
    
    // Create typing indicator
    const typingIndicator = document.createElement('div');
    typingIndicator.className = 'message ai-message typing';
    typingIndicator.innerHTML = `
      <div class="typing-indicator">
        <span></span>
        <span></span>
        <span></span>
      </div>
    `;
    
    aiMessageContainer.appendChild(aiAvatar);
    aiMessageContainer.appendChild(typingIndicator);
    messageDisplayArea.appendChild(aiMessageContainer);
    messageDisplayArea.scrollTop = messageDisplayArea.scrollHeight;

    try {
      const response = await fetch('/api/ai/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ message: userInputText }),
      });

      // Update credits if available
      const newCreditsHeader = response.headers.get('X-User-Credits');
      if (newCreditsHeader && chatCreditDisplay) {
        const newCredits = parseInt(newCreditsHeader, 10);
        if (!isNaN(newCredits)) {
          chatCreditDisplay.textContent = newCredits.toString();
          
          // Also update navbar credits if present
          const navbarCreditDisplay = document.getElementById('navbar-credit-display') as HTMLElement | null;
          if (navbarCreditDisplay) {
            navbarCreditDisplay.textContent = newCredits.toString();
          }
        }
      }

      // Remove typing indicator
      typingIndicator.remove();

      if (response.ok) {
        const data = await response.json();
        
        // It's possible for a 200 OK to still contain an error object from business logic
        if (data.error) {
          let displayMessage: string = data.error; // Default to the error message from API
          if (data.error === "email_not_verified") {
            displayMessage = "Please verify your email to use the AI chat. You can resend the verification email from your profile page.";
          } else if (data.error === "insufficient_credits") {
            displayMessage = "You do not have enough credits to send this message.";
          }
          
          const errorMessageDiv = document.createElement('div');
          errorMessageDiv.className = 'message ai-message error';
          errorMessageDiv.textContent = displayMessage;
          aiMessageContainer.appendChild(errorMessageDiv);
        } else if (data.reply) {
          const aiMessageDiv = document.createElement('div');
          aiMessageDiv.className = 'message ai-message';

          // Process the text with proper ordering to avoid conflicts
          let formattedText: string = data.reply;

          // First, identify and temporarily mark code blocks to protect them
          const codeBlocks: { lang: string, code: string }[] = [];
          formattedText = formattedText.replace(/```([\s\S]*?)```/g, function(_match: string, code: string) {
            const langMatch = code.match(/^(\S+)\n/); // Check for language identifier on the first line
            let lang = '';
            let actualCode = code;
            if (langMatch) {
              lang = langMatch[1];
              actualCode = code.substring(langMatch[0].length);
            }
            const placeholder = `__CODE_BLOCK_${codeBlocks.length}__`;
            codeBlocks.push({ lang, code: actualCode });
            return placeholder;
          });

          // Improved list handling
          // First, detect if we have a numbered list in the content
          const hasNumberedList = /^\d+[.)] /m.test(formattedText);

          // Process numbered lists - capture entire list sections
          if (hasNumberedList) {
            // Find sequences of lines that start with numbers
            const numberedListRegex = /(?:^\d+[.)] .+$(?:\n|$))+/gm;
            formattedText = formattedText.replace(numberedListRegex, function(match: string) {
              // Process each list item
              const listItems: string[] = match.split('\n').filter((line: string) => line.trim() !== '');
              const processedItems = listItems.map((item: string) => {
                // Extract the number and text
                const itemMatch = item.match(/^(\d+)[.)] (.+)$/);
                if (itemMatch) {
                  const [, number, text] = itemMatch;
                  return `<li value="${number}" style="margin-bottom: 0.5em;">${text}</li>`;
                }
                return item;
              });
              
              // Join the items and wrap in an ordered list
              return `<ol style="margin: 0.75em 0; padding-left: 2em; list-style-position: outside;">${processedItems.join('')}</ol>`;
            });
          }

          // Process unordered lists - capture entire list sections
          formattedText = formattedText.replace(/(?:^[*-] .+$(?:\n|$))+/gm, function(match: string) {
            // Process each list item
            const listItems: string[] = match.split('\n').filter((line: string) => line.trim() !== '');
            const processedItems = listItems.map((item: string) => {
              // Extract the bullet and text
              const itemMatch = item.match(/^[*-] (.+)$/);
              if (itemMatch) {
                const [, text] = itemMatch;
                return `<li style="margin-bottom: 0.5em;">${text}</li>`;
              }
              return item;
            });
            
            // Join the items and wrap in an unordered list
            return `<ul style="margin: 0.75em 0; padding-left: 2em; list-style-type: disc; list-style-position: outside;">${processedItems.join('')}</ul>`;
          });

          // Process markdown links: [text](url)
          formattedText = formattedText.replace(/\[([^\]]+)\]\(([^)]+)\)/g, 
            '<a href="$2" target="_blank" rel="noopener noreferrer" style="color: #4dabf7; text-decoration: underline; word-break: break-all;">$1</a>'
          );

          // Now process regular markdown elements
          // Bold: **text**
          formattedText = formattedText.replace(/\*\*([^*]+)\*\*/g, '<span style="font-weight: bold;">$1</span>');

          // Italic: *text*
          formattedText = formattedText.replace(/\*([^*]+)\*/g, '<span style="font-style: italic;">$1</span>');

          // Inline code: `code`
          formattedText = formattedText.replace(/`([^`]+)`/g, '<code style="font-family: monospace; background-color: #333740; color: #d0d0d0; padding: 0.2em 0.4em; border-radius: 3px; font-size: 0.9em;">$1</code>');

          // Horizontal rule: ---
          formattedText = formattedText.replace(/^---$/gm, '<hr style="border: 0; border-top: 1px solid #555; margin: 1em 0;">');

          // Headers: # Header
          formattedText = formattedText.replace(/^### (.*?)$/gm, '<h3 style="font-size: 1.1em; font-weight: bold; margin: 1em 0 0.5em 0;">$1</h3>');
          formattedText = formattedText.replace(/^## (.*?)$/gm, '<h2 style="font-size: 1.3em; font-weight: bold; margin: 1em 0 0.5em 0;">$1</h2>');
          formattedText = formattedText.replace(/^# (.*?)$/gm, '<h1 style="font-size: 1.5em; font-weight: bold; margin: 1em 0 0.5em 0;">$1</h1>');

          // Now restore code blocks with proper HTML
          codeBlocks.forEach((block: { lang: string, code: string }, index: number) => {
            const placeholder = `__CODE_BLOCK_${index}__`;
            // Simple escaping for HTML content within pre tags
            const escapedCode = block.code.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
            const langClass = block.lang ? `language-${block.lang}` : '';
            formattedText = formattedText.replace(
              placeholder,
              `<pre style="background-color: #282c34; color: #abb2bf; padding: 1em; border-radius: 5px; overflow-x: auto; margin: 1em 0; font-family: monospace; white-space: pre;"><code class="${langClass}">${escapedCode}</code></pre>`
            );
          });
          
          // Handle paragraphs - but be careful not to break lists
          // First, identify paragraphs (text blocks separated by double newlines)
          formattedText = formattedText.replace(/\n\n(?!<[uo]l|<h|<pre|<hr)/g, '</p><p style="margin: 0.75em 0;">');
          
          // Wrap the entire text in a paragraph if it doesn't start with a formatted element
          if (!formattedText.startsWith('<h') && 
              !formattedText.startsWith('<pre') && 
              !formattedText.startsWith('<hr') && 
              !formattedText.startsWith('<ol') && 
              !formattedText.startsWith('<ul')) {
            formattedText = '<p style="margin: 0.75em 0;">' + formattedText;
          }
          
          // Close the last paragraph if needed
          if (!formattedText.endsWith('</p>') && 
              !formattedText.endsWith('</h1>') && 
              !formattedText.endsWith('</h2>') && 
              !formattedText.endsWith('</h3>') && 
              !formattedText.endsWith('</pre>') && 
              !formattedText.endsWith('</ol>') && 
              !formattedText.endsWith('</ul>')) {
            formattedText = formattedText + '</p>';
          }
          
          // Set the formatted HTML
          aiMessageDiv.innerHTML = formattedText;
          
          // Add timestamp
          const timestamp = document.createElement('div');
          timestamp.className = 'message-timestamp';
          timestamp.textContent = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
          aiMessageDiv.appendChild(timestamp);
          
          aiMessageContainer.appendChild(aiMessageDiv);
        } else {
          const aiMessageDiv = document.createElement('div');
          aiMessageDiv.className = 'message ai-message';
          aiMessageDiv.textContent = "Received an empty reply from AI.";
          aiMessageContainer.appendChild(aiMessageDiv);
        }
      } else {
        const errorData = await response.json().catch(() => ({ error: `Error: Could not get response from AI. Status: ${response.status}` }));
        let displayMessage: string = errorData?.error || `Error: Could not get response from AI. Status: ${response.status}`;

        if (response.status === 403 && errorData?.error === "email_not_verified") {
          displayMessage = "Please verify your email to use the AI chat. You can resend the verification email from your profile page.";
        } else if (response.status === 402 && errorData?.error === "insufficient_credits") {
          displayMessage = "You do not have enough credits to send this message.";
        }
        
        const errorMessageDiv = document.createElement('div');
        errorMessageDiv.className = 'message ai-message error';
        errorMessageDiv.textContent = displayMessage;
        aiMessageContainer.appendChild(errorMessageDiv);
      }
    } catch (error) {
      // Remove typing indicator
      if (typingIndicator && typingIndicator.parentNode) {
        typingIndicator.remove();
      }
      
      const errorMessageDiv = document.createElement('div');
      errorMessageDiv.className = 'message ai-message error';
      errorMessageDiv.textContent = 'Error: Could not connect to the AI service.';
      aiMessageContainer.appendChild(errorMessageDiv);
      console.error('Fetch error:', error);
    } finally {
      if (messageDisplayArea) {
        messageDisplayArea.scrollTop = messageDisplayArea.scrollHeight;
      }
      
      // Re-enable input area
      if (chatInput) {
        chatInput.focus();
      }
    }
  }

  // Event listeners
  if (sendButton) {
    sendButton.addEventListener('click', sendMessage);
  }
  
  if (chatInput) {
    chatInput.addEventListener('keypress', function(event: KeyboardEvent) {
      if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault(); // Prevent default to avoid newline
        sendMessage();
      }
    });
    
    // Focus the input on page load
    chatInput.focus();
  }
  
  // Add welcome message on page load
  if (messageDisplayArea && messageDisplayArea.children.length === 0) {
    const messageContainer = document.createElement('div');
    messageContainer.className = 'message-container ai-message-container';
    
    const aiAvatar = document.createElement('div');
    aiAvatar.className = 'ai-avatar';
    aiAvatar.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M12 2a8 8 0 0 1 8 8v12a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V10a8 8 0 0 1 8-8z"></path>
        <path d="M9 19h6"></path>
        <path d="M9 15h6"></path>
        <circle cx="12" cy="7" r="1"></circle>
      </svg>
    `;
    
    const aiMessageDiv = document.createElement('div');
    aiMessageDiv.className = 'message ai-message';
    aiMessageDiv.innerHTML = '<p>Hello! I\'m your AI assistant. How can I help you today?</p>';
    
    messageContainer.appendChild(aiAvatar);
    messageContainer.appendChild(aiMessageDiv);
    messageDisplayArea.appendChild(messageContainer);
  }
</script>

<style>
  .chat-container {
    display: flex;
    flex-direction: column;
    height: 100%;
    max-height: 80vh;
    background-color: hsl(var(--muted));
    border-radius: var(--radius-md);
    box-shadow: var(--shadow-md);
    overflow: hidden;
    font-family: sans-serif;
  }
  
  .chat-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-sm) var(--space-md);
    background-color: hsl(var(--bkg));
    border-bottom: 1px solid hsl(var(--txt) / 0.1);
  }
  
  .chat-header h2 {
    margin: 0;
    font-size: var(--fs-lg);
    color: hsl(var(--accent));
  }
  
  .chat-controls {
    display: flex;
    gap: var(--space-xs);
  }
  
  .message-display {
    flex-grow: 1;
    overflow-y: auto;
    padding: var(--space-md);
    display: flex;
    flex-direction: column;
    gap: var(--space-md);
    scroll-behavior: smooth;
    background-color: hsl(var(--bkg) / 0.5);
  }
  
  /* Message containers with avatars */
  .message-container {
    display: flex;
    gap: var(--space-sm);
    max-width: 85%;
  }
  
  .ai-message-container {
    align-self: flex-start;
  }
  
  .user-message-container {
    align-self: flex-end;
    flex-direction: row-reverse;
  }
  
  /* Avatar styles */
  .ai-avatar, .user-avatar {
    display: flex;
    align-items: flex-start;
    padding-top: var(--space-xs);
    width: 32px;
    height: 32px;
    flex-shrink: 0;
  }
  
  .ai-avatar {
    color: hsl(var(--accent));
  }
  
  .user-avatar {
    color: hsl(var(--primary));
  }
  
  /* Message bubble styles */
  .message {
    padding: var(--space-sm) var(--space-md);
    border-radius: var(--radius-lg);
    max-width: 100%;
    word-wrap: break-word;
    position: relative;
  }
  
  .ai-message {
    background-color: hsl(var(--bkg));
    color: hsl(var(--txt));
    border: 1px solid hsl(var(--txt) / 0.1);
  }
  
  .user-message {
    background-color: hsl(var(--accent));
    color: hsl(var(--accent-contrast));
    border: 1px solid hsl(var(--accent) / 0.5);
  }
  
  .message.error {
    background-color: hsl(var(--destructive));
    color: hsl(var(--destructive-contrast));
    border-color: hsl(var(--destructive) / 0.5);
  }
  
  .message-timestamp {
    font-size: var(--fs-xs);
    color: hsl(var(--txt) / 0.6);
    margin-top: var(--space-xxs);
    text-align: right;
  }
  
  .user-message .message-timestamp {
    color: hsl(var(--accent-contrast) / 0.7);
  }
  
  /* Typing indicator */
  .typing-indicator {
    display: flex;
    align-items: center;
    padding: var(--space-sm) var(--space-md);
  }
  
  .typing-indicator span {
    height: 8px;
    width: 8px;
    margin: 0 2px;
    background-color: hsl(var(--txt) / 0.5);
    border-radius: 50%;
    display: inline-block;
    animation: typing 1.4s infinite ease-in-out both;
  }
  
  .typing-indicator span:nth-child(1) { animation-delay: -0.32s; }
  .typing-indicator span:nth-child(2) { animation-delay: -0.16s; }
  .typing-indicator span:nth-child(3) { animation-delay: 0s; }
  
  @keyframes typing {
    0%, 80%, 100% { transform: scale(0); }
    40% { transform: scale(1.0); }
  }
  
  /* Input area styles */
  .input-area {
    display: flex;
    align-items: flex-end; /* Align items to bottom for better textarea resize experience */
    padding: var(--space-sm);
    border-top: 1px solid hsl(var(--txt) / 0.1);
    background-color: hsl(var(--bkg));
  }
  
  #chat-input {
    flex-grow: 1;
    padding: var(--space-sm);
    border: 1px solid hsl(var(--input));
    border-radius: var(--radius-md);
    resize: none; /* Disable manual resize */
    font-size: var(--fs-base);
    line-height: 1.4;
    background-color: hsl(var(--input-bkg));
    color: hsl(var(--input-txt));
    max-height: 150px; /* Max height for auto-resize */
    overflow-y: auto; /* Add scroll if content exceeds max-height */
  }
  
  #chat-input:focus {
    outline: none;
    border-color: hsl(var(--accent));
    box-shadow: 0 0 0 2px hsl(var(--accent) / 0.2);
  }
  
  .send-button {
    background-color: hsl(var(--accent));
    color: hsl(var(--accent-contrast));
    border: none;
    padding: var(--space-sm);
    border-radius: var(--radius-md);
    margin-left: var(--space-sm);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s ease;
  }
  
  .send-button:hover {
    background-color: hsl(var(--accent) / 0.9);
  }
  
  .send-button:disabled {
    background-color: hsl(var(--muted));
    cursor: not-allowed;
  }
  
  .send-button svg {
    width: 20px;
    height: 20px;
  }
  
  /* Chat footer styles */
  .chat-footer {
    padding: var(--space-xs) var(--space-md);
    background-color: hsl(var(--bkg));
    border-top: 1px solid hsl(var(--txt) / 0.1);
    font-size: var(--fs-sm);
    color: hsl(var(--txt) / 0.7);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .credits-info span {
    font-weight: 500;
  }
  
  #chat-credit-display {
    color: hsl(var(--accent));
  }
  
  /* Markdown specific styling */
  .message p {
    margin: 0.75em 0;
    line-height: 1.6;
  }
  .message p:first-child {
    margin-top: 0;
  }
  .message p:last-child {
    margin-bottom: 0;
  }
  
  .message a {
    color: #4dabf7; /* A distinct link color */
    text-decoration: underline;
    word-break: break-all; /* Ensure long URLs don't break layout */
  }
  
  .message a:hover {
    text-decoration: none;
  }
  
  .message strong, .message span[style*="font-weight: bold"] {
    font-weight: bold;
  }
  
  .message em, .message span[style*="font-style: italic"] {
    font-style: italic;
  }
  
  .message code:not(pre code) { /* Inline code */
    font-family: monospace;
    background-color: #333740; /* Darker background for inline code */
    color: #d0d0d0; /* Light text for inline code */
    padding: 0.2em 0.4em;
    border-radius: 3px;
    font-size: 0.9em;
  }
  
  .message pre { /* Code blocks */
    background-color: #282c34; /* Standard dark theme for code blocks */
    color: #abb2bf; /* Common light text color for code blocks */
    padding: 1em;
    border-radius: 5px;
    overflow-x: auto;
    margin: 1em 0;
    font-family: monospace;
    white-space: pre; /* Preserve whitespace and newlines */
  }
  
  .message pre code { /* Code inside pre, for syntax highlighting if added */
    padding: 0;
    background: none;
    color: inherit;
    font-size: inherit;
    border-radius: 0;
  }
  
  .message ul, .message ol {
    margin: 0.75em 0;
    padding-left: 2em; /* Indentation for lists */
    list-style-position: outside; /* Bullets/numbers outside the text flow */
  }
  
  .message ul {
    list-style-type: disc;
  }
  
  .message ol {
    list-style-type: decimal;
  }
  
  .message li {
    margin-bottom: 0.5em; /* Spacing between list items */
  }
  
  .message hr {
    border: 0;
    border-top: 1px solid #555; /* A subtle horizontal rule */
    margin: 1em 0;
  }
  
  .message h1, .message h2, .message h3 {
    font-weight: bold;
    margin: 1em 0 0.5em 0;
    line-height: 1.3;
  }
  
  .message h1 { font-size: 1.5em; }
  .message h2 { font-size: 1.3em; }
  .message h3 { font-size: 1.1em; }
  
  /* Responsive adjustments */
  @media (max-width: 600px) {
    .chat-container {
      max-height: none; /* Allow full height on small screens */
      border-radius: 0;
    }
  
    .message-container {
      max-width: 95%;
    }
  
    .chat-header h2 {
      font-size: var(--fs-md);
    }
  
    #chat-input {
      font-size: var(--fs-sm);
    }
  
    .send-button svg {
      width: 18px;
      height: 18px;
    }
  }
</style>